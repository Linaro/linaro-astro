---
import BaseHead from "@/components/head/BaseHead.astro";
import NavBar from "@/components/nav/NavBar.astro";
import Footer from "@/components/footer/Footer.astro";

interface Props {
  title: string;
  description: string;
  image?: string;
  type?: string;
}

const { title, description, type = "website", image } = Astro.props;
---

<html lang="en">
  <BaseHead
    title={title + " | Linaro"}
    description={description}
    image={image}
    type={type}
  />
  <body class="min-h-screen flex flex-col text-white">
    <NavBar />
    <slot />
    <Footer />
    <script>
      const animatedElements = document.querySelectorAll("[data-animate]");

      const observer = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entry) => {
            if (!(entry.target instanceof HTMLElement)) return;
            const animatedClass = entry.target.dataset["animate"] as string;
            if (entry.isIntersecting) {
              entry.target.classList.add(animatedClass);
              entry.target.classList.remove("invisible");
              observer.unobserve(entry.target);
            } else {
              entry.target.classList.remove(animatedClass);
            }
          });
        },
        {
          rootMargin: "-300px 0px -300px 0px",
        },
      );

      animatedElements.forEach((el) => {
        observer.observe(el);
      });
    </script>
    <script>
      declare global {
        interface Window {
          dataLayer: Record<string, any>[];
        }
      }
      ["DOMContentLoaded", "astro:after-swap"].forEach((event) => {
        document.addEventListener(event, addListeners);
      });

      function addListeners() {
        const forms = document.querySelectorAll(
          "[data-contact-form]",
        ) as NodeListOf<HTMLFormElement>;

        forms.forEach((form) => {
          form.addEventListener("submit", (event) => onSubmit(event, form));
        });

        const newsletterForm = document.querySelector(
          "#insight-form",
        ) as HTMLFormElement | null;

        if (newsletterForm) {
          const mailchimpUrl =
            "https://linaro.us3.list-manage.com/subscribe/post?u=14baaae786342d0d405ee59c2&id=bcfa4abc8f";

          newsletterForm.addEventListener("submit", (event) => {
            event.preventDefault();
            const button = newsletterForm.querySelector("#contact-submit");
            const loader = newsletterForm.querySelector("#contact-submitting");
            button?.classList.add("hidden");
            loader?.classList.remove("hidden");
            const formName =
              (
                newsletterForm.querySelector(
                  "input[name='formName']",
                ) as HTMLInputElement
              )?.value || "unknown_form";

            if (!window.dataLayer) {
              window.dataLayer = [];
            }

            if (typeof window.dataLayer.push === "function") {
              window.dataLayer.push({
                formName: formName,
                event: "form_submission",
              });
            }
            const tempForm = document.createElement("form");
            tempForm.action = mailchimpUrl;
            tempForm.method = "POST";
            tempForm.style.display = "none";

            const inputs = newsletterForm.querySelectorAll(
              "input, select, textarea",
            );
            inputs.forEach((input) => {
              const cloned = input.cloneNode(true) as HTMLInputElement;
              tempForm.appendChild(cloned);
            });

            document.body.appendChild(tempForm);
            setTimeout(() => {
              tempForm.submit();
              loader?.classList.add("hidden");
              button?.classList.remove("hidden");
            }, 5000);
          });
        }
      }

      function onSubmit(e: SubmitEvent, form: HTMLFormElement) {
        e.preventDefault();

        const feedback = form.parentElement!.querySelector("#contact-feedback");
        const feedbackText = form.parentElement!.querySelector(
          "#contact-feedback-text",
        ) as HTMLParagraphElement;

        const button = form.querySelector("#contact-submit");
        const loader = form.querySelector("#contact-submitting");

        if (!e.target) return;

        const data = new FormData(e.target as HTMLFormElement);
        const payload = {} as Record<string, any>;

        const formName =
          (form.querySelector("input[name='formName']") as HTMLInputElement)
            ?.value || "unknown_form";

        data.forEach((value, key) => {
          if (key === "webinarDataId" || key === "whitepaperId") {
          }
          if (key === "customfield_13586" || key === "customfield_13587") {
            payload[key] = { id: value };
          } else {
            payload[key] = value;
          }
        });
        delete payload.agreed;

        if (!window.dataLayer) {
          window.dataLayer = [];
        }

        if (window.dataLayer && typeof window.dataLayer.push === "function") {
          window.dataLayer.push({
            formName: formName,
            event: "form_submission",
          });
        }

        button?.classList.add("hidden");
        loader?.classList.remove("hidden");

        fetch(
          "https://avqfk3gzg2.execute-api.us-east-1.amazonaws.com/prod/formSubmit",
          {
            method: "POST",
            body: JSON.stringify(payload),
            headers: {
              "X-Api-Key": "ox9fSkYfRK16mxy5Gv6pM121H7iAubAQ6uzsDmoW",
            },
          },
        )
          .then((response) => {
            return response.json();
          })
          .then((result) => {
            form.classList.add("hidden");
            feedback!.classList.remove("hidden");

            if (formName === "webinar_contact") {
              const webinarDataId =
                (
                  form.querySelector(
                    "input[name='webinarDataId']",
                  ) as HTMLInputElement
                )?.value || "unknown_webinar";
              fetch(`/api/webinar-data/${webinarDataId}`)
                .then((res) => {
                  if (!res.ok) throw new Error("Failed to load webinar data");
                  return res.json();
                })
                .then((webinarData) => {
                  const { passcode, url } = webinarData;
                  feedbackText!.innerHTML = `
      <div class="space-y-4 text-center">
        <p class="text-base">Thank you! Please use the passcode below to access the webinar.</p>
        <div class="text-lg font-semibold text-blue-600">
          Passcode:
          <div class="text-2xl font-bold text-blue-700">${passcode}</div>
        </div>
        <div>
          <a href="${url}" class="inline-block text-xl text-blue-700 font-semibold underline" target="_blank">
            Link to webinar recording
          </a>
        </div>
      </div>
    `;
                })
                .catch((err) => {
                  console.error("Webinar fetch error:", err);
                  feedbackText!.innerHTML = `<p class="text-red-600">Sorry, something went wrong loading the webinar info.</p>`;
                });
            } else if (formName === "whitepaper_contact") {
              const whitepaperId =
                (
                  form.querySelector(
                    "input[name='whitepaperId']",
                  ) as HTMLInputElement
                )?.value || "unknown_whitepaper";

              fetch(`/api/whitepaper-data/${whitepaperId}`)
                .then((res) => {
                  if (!res.ok)
                    throw new Error("Failed to load whitepaper data");
                  return res.json();
                })
                .then((whitepaperData) => {
                  const { url } = whitepaperData;

                  feedbackText!.innerHTML = `
          <div class="space-y-4 text-center">
            <p class="text-base">Thank you! Your download should start automatically. If not, click below:</p>
            <div>
              <a href="${url}" class="inline-block text-xl text-blue-700 font-semibold underline" target="_blank">
                Download Whitepaper
              </a>
            </div>
          </div>
        `;

                  // trigger auto-download
                  window.location.href = url;
                })
                .catch((err) => {
                  console.error("Whitepaper fetch error:", err);
                  feedbackText!.innerHTML = `<p class="text-red-600">Sorry, something went wrong loading the whitepaper.</p>`;
                });
            } else {
              feedbackText!.innerText = result.message;
            }
          })
          .catch((error) => {
            feedback!.classList.remove("hidden");
            feedbackText!.innerText =
              "There was an error during submission. Please try again later.";
            button?.classList.remove("hidden");
          })
          .finally(() => {
            loader?.classList.add("hidden");
          });
      }
    </script>
  </body>
</html>
