---
import BaseHead from "@/components/head/BaseHead.astro";
import NavBar from "@/components/nav/NavBar.astro";
import Footer from "@/components/footer/Footer.astro";

interface Props {
  title: string;
  description: string;
  type?: string;
}

const { title, description, type = "website" } = Astro.props;
---

<html lang="en">
  <BaseHead title={title + " | Linaro"} description={description} type={type} />
  <body class="min-h-screen flex flex-col text-white">
    <NavBar />
    <slot />
    <Footer />
    <script>
      const animatedElements = document.querySelectorAll("[data-animate]");

      const observer = new IntersectionObserver(
        (entries, observer) => {
          entries.forEach((entry) => {
            if (!(entry.target instanceof HTMLElement)) return;
            const animatedClass = entry.target.dataset["animate"] as string;
            if (entry.isIntersecting) {
              entry.target.classList.add(animatedClass);
              entry.target.classList.remove("invisible");
              observer.unobserve(entry.target);
            } else {
              entry.target.classList.remove(animatedClass);
            }
          });
        },
        {
          rootMargin: "-300px 0px -300px 0px",
        },
      );

      animatedElements.forEach((el) => {
        observer.observe(el);
      });
    </script>
    <script>
      ["DOMContentLoaded", "astro:after-swap"].forEach((event) => {
        document.addEventListener(event, addListeners);
      });

      function addListeners() {
        const forms = document.querySelectorAll(
          "[data-contact-form]",
        ) as NodeListOf<HTMLFormElement>;

        forms.forEach((form) => {
          form.addEventListener("submit", (event) => onSubmit(event, form));
        });
      }

      function onSubmit(e: SubmitEvent, form: HTMLFormElement) {
        e.preventDefault();

        const feedback = form.parentElement!.querySelector("#contact-feedback");
        const feedbackText = form.parentElement!.querySelector(
          "#contact-feedback-text",
        ) as HTMLParagraphElement;

        const button = form.querySelector("#contact-submit");
        const loader = form.querySelector("#contact-submitting");

        if (!e.target) return;

        const data = new FormData(e.target as HTMLFormElement);
        const payload = {} as Record<string, any>;

        data.forEach((value, key) => (payload[key] = value));
        delete payload.agreed;

        button?.classList.add("hidden");
        loader?.classList.remove("hidden");

        fetch(
          "https://pvwhresjz0.execute-api.us-east-1.amazonaws.com/dev/formSubmit",
          {
            method: "POST",
            body: JSON.stringify(payload),
            headers: {
              "X-Api-Key": "xpIcQXHk0Y1XUmBBH4xUl5ScFxgddlFnEpQeSzO3",
            },
          },
        )
          .then((response) => response.json())
          .then((result) => {
            form.classList.add("hidden");
            feedback!.classList.remove("hidden");
            feedbackText!.innerText = result.message;
          })
          .catch(() => {
            feedback!.classList.remove("hidden");
            feedbackText!.innerText =
              "There was an error during submission. Please try again later.";
            button?.classList.remove("hidden");
          })
          .finally(() => {
            loader?.classList.add("hidden");
          });
      }
    </script>
  </body>
</html>
