---
import { getCloudinarySrc } from "@/lib/cloudinary";
import BaseLayout from "./BaseLayout.astro";
import { getImage, Image } from "astro:assets";
import { getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import dayjs from "dayjs";
import { getEntries } from "astro:content";
import CloudinaryImg from "@/components/cloudinary/CloudinaryImg.astro";
import { remark } from "remark";
import stripMarkdown from "strip-markdown";
import ArticleContent from "@/components/article/ArticleContent.astro";
import { getCollection } from "astro:content";
import BlogListing from "@/components/article/blog/BlogListing.astro";

type Props = {
  post: CollectionEntry<"news">;
};

const {
  post: {
    collection,
    slug,
    data: {
      title,
      author: authorRef,
      description,
      date,
      tags: tagList,
      image,
      related,
    },
    body,
    render,
  },
} = Astro.props;

const { data: author } = (await getEntry(
  authorRef
)) as CollectionEntry<"authors">;

const tags = await getEntries(tagList);

const readTime = `${Math.ceil(body.split(" ").length / 183)} min read`;

const optimizedBackground = await getImage({
  src: getCloudinarySrc({
    src: "linaro-website/graphics/purple-map",
    alt: "",
    width: 1724.55,
    height: 1182.9,
  }),
  format: "webp",
  inferSize: true,
});
const { Content, headings } = await render();

const summary =
  String(
    await remark()
      .use(stripMarkdown, {
        remove: ["heading"],
      })
      .process(body)
  )
    .split(" ")
    .slice(0, 30)
    .join(" ")
    .replace("\\", "") + "...";

let relatedPosts;
if (related.length > 0) {
  relatedPosts = await getEntries(related);
} else {
  relatedPosts = (
    await getCollection("news", ({ slug: thisSlug }) => thisSlug !== slug)
  )
    .sort((a, b) => dayjs(b.data.date).diff(a.data.date))
    .slice(0, 3);
}
---

<BaseLayout title={title + " | Newsroom"} description={description}>
  <main
    data-pagefind-body
    data-pagefind-filter={`type:${collection}`}
    class="z-0"
  >
    <section
      class:list={[
        "relative hero-background-image pt-32 pb-16  container mx-auto max-w-5xl px-8 xl:px-0 z-[-1]",
      ]}
    >
      <h1 class="text-5xl font-bold mb-16 max-w-4xl">{title}</h1>
      <div class="flex items-center gap-6">
        {
          author.image && (
            <CloudinaryImg
              src={author.image}
              alt={author.name}
              width={75}
              height={75}
              class="aspect-square object-cover rounded-full my-4"
              data-pagefind-meta="author_image[src]"
            />
          )
        }
        <p class="text-2xl" data-pagefind-meta="author">
          {`${author.first_name} ${author.last_name}`}
        </p>
      </div>
      <p class="flex gap-4 flex-wrap" data-pagefind-ignore>
        <span
          data-pagefind-meta={`date:${date}`}
          data-pagefind-sort={`date:${new Date(date).getTime()}`}
          >{dayjs(date).format("dddd, MMMM D, YYYY")}</span
        ><span>|</span><span>{readTime}</span>
      </p>
      <ul class="flex flex-wrap gap-4 my-8">
        {
          tags.map(({ slug, data: { name } }) => (
            <li data-pagefind-filter={`tags:${slug}`} data-pagefind-ignore>
              <a href={`/news?tags=${slug}`}>
                <button class="linaro-gradient-button">{name}</button>
              </a>
            </li>
          ))
        }
      </ul>
      <span data-pagefind-meta="summary" class="hidden" data-pagefind-ignore
        >{summary}</span
      >
    </section>
    <ArticleContent Content={Content} image={image} />
  </main>
  <aside
    class="container mx-auto max-w-5xl px-8 xl:px-0 mb-24"
    data-pagefind-ignore
  >
    <h2 class="text-5xl text-linaro-yellow font-bold mb-16">Latest News</h2>
    <ul class="flex flex-wrap gap-8 justify-center">
      {relatedPosts?.map((post) => <BlogListing {...post} />)}
    </ul>
  </aside>
</BaseLayout>
<style
  define:vars={{ backgroundUrl: `url(${optimizedBackground.src})` }}
  lang="scss"
>
  .hero-background-image {
    background-image: var(--backgroundUrl);
    background-repeat: no-repeat;
    /* background-position: top right -50%; */
    @apply bg-center bg-[top_left] lg:bg-[top_right_-50%]  pb-[36rem] mb-[-36rem];
  }
</style>
