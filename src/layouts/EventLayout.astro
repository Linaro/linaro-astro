---
import { getCloudinarySrc } from "@/lib/cloudinary";
import BaseLayout from "./BaseLayout.astro";
import { getImage, Image } from "astro:assets";
import { getEntry } from "astro:content";
import type { CollectionEntry } from "astro:content";
import dayjs from "dayjs";
import { getEntries } from "astro:content";
import CloudinaryImg from "@/components/cloudinary/CloudinaryImg.astro";
import { remark } from "remark";
import stripMarkdown from "strip-markdown";
import ArticleContent from "@/components/article/ArticleContent.astro";
import advancedFormat from "dayjs/plugin/advancedFormat";
import dayOfYear from "dayjs/plugin/dayOfYear";
import { getCollection } from "astro:content";
import EventListing from "@/components/article/events/EventListing.astro";
import WebinarContactModal from "@/components/forms/WebinarContactModal.astro";
dayjs.extend(advancedFormat);
dayjs.extend(dayOfYear);

type Props = {
  post: CollectionEntry<"events">;
};

const {
  post: {
    data: {
      title,
      description,
      image,
      event_start,
      event_end,
      location,
      button,
      webinarContactButton,
    },
    body,
    render,
  },
} = Astro.props;

const readTime = `${Math.ceil(body.split(" ").length / 183)} min read`;

const optimizedBackground = await getImage({
  src: getCloudinarySrc({
    src: "linaro-website/graphics/yellow-map",
    alt: "",
    width: 1724.55,
    height: 1182.9,
  }),
  format: "webp",
  inferSize: true,
});
const { Content, headings } = await render();

const summary =
  String(
    await remark()
      .use(stripMarkdown, {
        remove: ["heading"],
      })
      .process(body),
  )
    .split(" ")
    .slice(0, 30)
    .join(" ")
    .replace("\\", "") + "...";

let formattedDate;
const eventStart = dayjs(event_start);
const eventEnd = dayjs(event_end);

if (eventStart.dayOfYear() === eventEnd.dayOfYear()) {
  formattedDate = `${dayjs(event_start).format("D MMMM, YYYY")}`;
} else {
  formattedDate = `${dayjs(event_start).format("D")}-${dayjs(event_end).format("DD MMMM, YYYY")}`;
}
if (!(event_start instanceof Date)) {
  formattedDate = "Coming Soon";
}

const upcomingEvents = (
  await getCollection(
    "events",
    ({ data }) =>
      (String(import.meta.env.IS_PREVIEW) === "true" ||
        Date.now() > new Date(data.date_published).getTime()) &&
      (new Date(data.event_start).getTime() > Date.now() ||
        data.event_start === "Coming Soon"),
  )
)
  .sort((a, b) => dayjs(b.data.event_start).diff(a.data.event_start))
  .slice(0, 3);
---

<BaseLayout title={title + " | Events"} description={description} image={image}>
  <main data-pagefind-body data-pagefind-filter="type:events" class="z-0">
    <section
      class:list={[
        "relative hero-background-image pt-32 container mx-auto max-w-5xl px-8 xl:px-0 z-[-1]",
      ]}
    >
      <h1 class="text-5xl font-bold mb-16 max-w-4xl">{title}</h1>
      <p class="flex gap-4 flex-wrap items-start block my-4">
        <div
          data-pagefind-meta={`event_start`}
          data-pagefind-sort={`event_start`}
          data-pagefind-ignore
          class="hidden"
        >
          {new Date(event_start).getTime()}
        </div>
        <div
          data-pagefind-meta={`event_end`}
          data-pagefind-sort={`event_end`}
          data-pagefind-ignore
          class="hidden"
        >
          {new Date(event_end).getTime()}
        </div>
        <span data-pagefind-meta={`dates`}
          >{formattedDate ?? "Coming Soon"}</span
        >
        {
          location && (
            <span
              class="block sm:inline-block sm:before:content-['|'] sm:before:mx-4"
              data-pagefind-meta="location"
            >
              {location}
            </span>
          )
        }
      </p>
      <div>
        {
          webinarContactButton ? (
            <WebinarContactModal
              modal_id={webinarContactButton.modal_id}
              form_id={webinarContactButton.form_id}
              formName={webinarContactButton.formName}
              button_text={webinarContactButton.button_text}
              description={webinarContactButton.description}
              styles={{ buttonStyles: "my-8 no-underline inline-block" }}
              webinarDataId={webinarContactButton.webinarDataId}
            />
          ) : (
            button && (
              <a
                href={button.url}
                data-pagefind-meta="button_text, button_url[href]"
                target="_blank"
                class="my-8 no-underline inline-block"
              >
                <div class="linaro-gradient-button ">{button.text}</div>
              </a>
            )
          )
        }
      </div>
      <span data-pagefind-meta="summary" class="hidden" data-pagefind-ignore
        >{summary}</span
      >
    </section>
    <ArticleContent Content={Content} image={image} />
  </main>
  {
    upcomingEvents.length > 0 && (
      <aside class="container mx-auto max-w-5xl px-8 xl:px-0 mb-24">
        <h2 class="text-5xl text-linaro-yellow font-bold mb-16">
          Upcoming Events
        </h2>
        <ul class="flex flex-wrap gap-8 justify-center">
          {upcomingEvents.map((event) => (
            <EventListing {...event} />
          ))}
        </ul>
      </aside>
    )
  }
</BaseLayout>
<style
  define:vars={{ backgroundUrl: `url(${optimizedBackground.src})` }}
  lang="scss"
>
  .hero-background-image {
    background-image: var(--backgroundUrl);
    background-repeat: no-repeat;
    /* background-position: top right -50%; */
    @apply bg-[top_left] lg:bg-[top_right_-50%] pb-[36rem] mb-[-36rem];
  }
</style>
