---
import type { imageCardsSchema } from "@/content/schemas/sections";
import type { z } from "astro/zod";
import CloudinaryImg from "../cloudinary/CloudinaryImg.astro";
import { marked } from "marked";

type Props = z.infer<typeof imageCardsSchema>;
const { cards, styles, button_cards } = Astro.props;
---

<ul class:list={["list-none   p-0 ", styles?.container]}>
  {
    cards.map(async ({ image, title, text, button, style, url }) => {
      const content = text ? await marked.parse(text) : null;
      return (
        <li class:list={[styles?.card, style]}>
          {button_cards ? (
            <a href={url} class="no-underline">
              {image && (
                <CloudinaryImg
                  src={image.src}
                  alt={image.alt}
                  width={image.width}
                  height={image.height}
                  class:list={[styles?.image]}
                />
              )}
              <h3 class:list={[styles?.card_title]}>{title}</h3>
              {text && (
                <div
                  class:list={styles?.text ? [styles?.text] : ["text-xl z-20"]}
                  set:html={content}
                />
              )}
              {button && (
                <a
                  href={button.url}
                  class="no-underline"
                  target={button.url.startsWith("https") ? "_blank" : "_self"}
                >
                  <div class:list={[`linaro-gradient-button`, styles?.button]}>
                    {button.text}
                  </div>
                </a>
              )}
            </a>
          ) : (
            <>
              {image && (
                <CloudinaryImg
                  src={image.src}
                  alt={image.alt}
                  width={image.width}
                  height={image.height}
                  class:list={[styles?.image]}
                />
              )}
              <h3 class:list={[styles?.card_title]}>{title}</h3>
              {text && <div class:list={["text-xl z-20"]} set:html={content} />}
              {button && (
                <a
                  href={button.url}
                  class="no-underline"
                  target={button.url.startsWith("https") ? "_blank" : "_self"}
                >
                  <div
                    class:list={[
                      `linaro-gradient-button justify-self-start items-start `,
                      styles?.button,
                    ]}
                  >
                    {button.text}
                  </div>
                </a>
              )}
            </>
          )}
        </li>
      );
    })
  }
</ul>
