---
import type { z } from "astro/zod";
import BlogListing from "../article/blog/BlogListing.astro";
import EventListing from "../article/events/EventListing.astro";
import type { articlesSchema } from "@/content/schemas/sections";
import { getEntries } from "astro:content";
import type { CollectionKey } from "astro:content";
import type { CollectionEntry } from "astro:content";

type Props = z.infer<typeof articlesSchema>;

const { title } = Astro.props;

type GetEntriesType<T extends "blogs" | "events" | "news"> = {
  collection: T;
  slug: CollectionEntry<T>["slug"];
};

const posts = await getEntries(Astro.props.posts.map((post) => post.post));

// remove unpublished posts
const filteredPosts = posts.filter((post) => {
  if (String(import.meta.env.IS_PREVIEW) === "true") return true;

  if (post.collection === "events") {
    return Date.now() > new Date(post.data.date_published).getTime();
  }

  return Date.now() > new Date(post.data.date).getTime();
});
---

<div
  class="container mx-auto max-w-4xl 2xl:max-w-full px-8 xl:px-0 mb-24 not-prose"
  data-pagefind-ignore
>
  {
    title && (
      <h2 class="text-5xl text-linaro-yellow font-bold mb-16">Related Posts</h2>
    )
  }
  <ul class="flex flex-wrap gap-8 justify-center">
    {
      filteredPosts?.map((post) => {
        if (post.collection === "events") {
          return <EventListing {...post} />;
        } else {
          return <BlogListing {...post} />;
        }
      })
    }
  </ul>
</div>
