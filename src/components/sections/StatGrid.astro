---
import type { statGridSchema } from "@/content/schemas/sections";
import type { z } from "astro/zod";

type Props = z.infer<typeof statGridSchema>;

const { stats } = Astro.props;
---

<ul
  class="text-white list-none flex flex-wrap gap-x-12 gap-y-24 mx-auto p-0 justify-center items-center sm:items-start mb-16"
  id="stat-grid-container"
>
  {
    stats.map(({ value, label }) => (
      <li class="flex flex-col mx-0">
        <span
          class="linaro-gradient-text text-7xl font-bold not-sr-only"
          data-stat-count={value}
        >
          +0
        </span>
        <span class="sr-only">{value}</span>
        <span class="text-lg inline-block max-w-[30ch]">{label}</span>
      </li>
    ))
  }
</ul>
<script>
  function animateValue(
    obj: Element,
    start: number,
    end: number,
    duration: number
  ) {
    let startTimestamp: number | null = null;
    const step = (timestamp: number) => {
      if (!obj) return;
      if (!startTimestamp) startTimestamp = timestamp;
      const progress = Math.min((timestamp - startTimestamp) / duration, 1);
      obj.innerHTML =
        "+" + String(Math.floor(progress * (end - start) + start));
      if (progress < 1) {
        window.requestAnimationFrame(step);
      }
    };
    window.requestAnimationFrame(step);
  }

  const stats = document.querySelectorAll("[data-stat-count]");

  const observer = new IntersectionObserver((entries, observer) => {
    entries.forEach((entry) => {
      if (!(entry.target instanceof HTMLElement)) return;
      if (entry.isIntersecting) {
        animateValue(
          entry.target,
          0,
          Number(entry.target.dataset.statCount),
          5000
        );
        observer.unobserve(entry.target);
      }
    });
  }, {});

  stats.forEach((el) => {
    observer.observe(el);
  });
</script>
