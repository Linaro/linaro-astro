---
import type { contactButtonsSchema } from "@/content/schemas/sections";
import { Icon } from "astro-icon/components";
import type { z } from "astro/zod";
import ContactModal from "../forms/ContactModal.astro";
import InsightModal from "../forms/InsightModal.astro";

type Props = z.infer<typeof contactButtonsSchema>;

const { buttons, styles } = Astro.props;
---

<ul class:list={["list-none flex flex-wrap p-0 ", styles?.container]}>
  {
    buttons.map(({ icon, title, button_text, style, ...props }, index) => {
      return (
        <li class:list={[styles?.card]}>
          {icon && <Icon name={icon} size={100} class="my-0" />}
          {title && (
            <h3 class:list={["text-4xl my-5", styles?.card_title]}>{title}</h3>
          )}

          {() => {
            if (props.type === "link") {
              return (
                <a
                  class:list={[`linaro-gradient-button`]}
                  href={props.url}
                  target={props.url.startsWith("https") ? "_blank" : "_self"}
                  class="no-underline inline-block"
                >
                  <div>{button_text}</div>
                </a>
              );
            }

            if (props.type === "form") {
              return (
                <ContactModal
                  form_id={props.form_id}
                  modal_id={props.modal_id}
                  button_text={button_text}
                  description={title}
                  formName={props.formName}
                />
              );
            }

            if (props.type === "insight") {
              return (
                <InsightModal
                  button_text={button_text}
                  formName={props.formName}
                />
              );
            }
          }}
        </li>
      );
    })
  }
</ul>
<script>
  ["DOMContentLoaded", "astro:after-swap"].forEach((event) => {
    document.addEventListener(event, addListeners);
  });

  function addListeners() {
    const dialogs = document.querySelectorAll(
      "[data-contact-modal]",
    ) as NodeListOf<HTMLDialogElement>;

    dialogs.forEach((dialog) => {
      dialog.addEventListener("click", function (event) {
        const rect = dialog.getBoundingClientRect();
        const isInDialog =
          rect.top <= event.clientY &&
          event.clientY <= rect.top + rect.height &&
          rect.left <= event.clientX &&
          event.clientX <= rect.left + rect.width;
        if (!isInDialog) {
          dialog.close();
        }
      });
    });
  }
</script>
