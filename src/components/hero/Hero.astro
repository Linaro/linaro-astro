---
import { getCloudinarySrc } from "@/lib/cloudinary";
import type { GetImageResult } from "astro";
import { getImage } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import * as marked from "marked";

type Props = CollectionEntry<"pages">["data"]["hero"];

const { title, background_image, button, description, styles } = Astro.props!;
let optimizedBackground: GetImageResult | undefined;
if (background_image) {
  optimizedBackground = await getImage({
    src: getCloudinarySrc({
      src: background_image,
      alt: "",
      width: 1724.55,
      height: 1182.9,
    }),
    format: "webp",
    inferSize: true,
  });
}

const titleMarkdown = await marked.parseInline(title);
const descriptionMarkdown = await marked.parse(description);
---

<section
  class:list={[
    // style,
    `relative text-white  w-full max-w-screen overflow-hidden`,
    styles?.main_container
      ? styles.main_container
      : "h-[calc(100vh)] min-h-[800px] max-h-[1200px]",
  ]}
>
  <div
    class:list={[
      "absolute w-full h-full max-w-[160rem] mx-auto pl-0 sm:pl-[20%] z-10 container",
      styles?.background_container,
    ]}
  >
    <div
      class:list={[
        "w-full h-full hero-background-image bg-no-repeat bg-contain z-10",
        styles?.background,
        background_image && "hero-background-image",
      ]}
    >
    </div>
  </div>
  <div
    class:list={[
      "relative container mx-auto flex flex-col justify-center h-full px-8 z-20",
    ]}
  >
    <div class:list={["flex flex-col items-start", styles?.text_container]}>
      <h1
        class:list={[
          "text-inherit text-4xl md:text-5xl text-left leading-tight lg:leading-tight mb-0 prose prose-p:my-0 prose-em:linaro-gradient-text prose-em:not-italic",
          styles?.title,
        ]}
        set:html={titleMarkdown}
      />

      <div
        class:list={["text-xl", styles?.description]}
        set:html={descriptionMarkdown}
      />
      {
        button && (
          <a
            href={button.url}
            target={button.url.startsWith("https://") ? "_blank" : "self"}
            class="mt-12 no-underline inline-block"
          >
            <div class="linaro-gradient-button">{button.text}</div>
          </a>
        )
      }
    </div>
    <span class="hidden" data-pagefind-meta={`summary`}>{description}</span>
    <span class="hidden" data-pagefind-meta={`heading`}>{title}</span>
    {
      optimizedBackground && (
        <div
          class="hidden"
          data-pagefind-meta={`image:${optimizedBackground.src}`}
        />
      )
    }
  </div>
</section>

<style
  define:vars={{ backgroundUrl: `url(${optimizedBackground?.src ?? ""})` }}
  lang="scss"
>
  .hero-background-image {
    background-image: var(--backgroundUrl);
  }
</style>
